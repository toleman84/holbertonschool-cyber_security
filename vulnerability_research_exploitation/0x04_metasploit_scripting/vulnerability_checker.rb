#!/usr/bin/env ruby

require 'msf/core'

=begin
Este módulo incluye la mayoría de las funcionalidades básicas de Metasploit, 
como la definición de módulos auxiliares, opciones y funcionalidades comunes.
=end

=begin
include Msf::Auxiliary::Scanner

Esta línea incluye el módulo Scanner, que proporciona las funcionalidades de escaneo de red, 
como la capacidad de conectar a puertos específicos y trabajar con direcciones IP
(usado en tu función run_host para verificar puertos).
=end

=begin
register_options: 

Esta función es utilizada para registrar las opciones configurables del módulo, 
como la dirección IP de destino (RHOST), lo cual es necesario para la ejecución del módulo.
=end


module Msf
	module Auxiliary
		class MS17010Checker < Msf::Auxiliary
			include Msf::Auxiliary::Scanner

			def initialize
				super(
					'Name' => 'MS17-010 Vulnerability Checker',
					'Description' => 'Comprueba si un sistema objetivo es vulnerable a la vulnerabilidad MS17-010 (EternalBlue).',
					'Author' => ['Tu Nombre'],
					'License' => MSF_LICENSE
				)

				# Opciones del módulo
				register_options(
					[
						Opt::RHOST()
					]
				)
			end

			def run_host(ip)
				print_status("Comprobando #{ip} para la vulnerabilidad MS17-010...")

				begin
					# Conexión al puerto SMB (445)
					sock = connect(nil, ip, 445, 5)

					# Enviar un paquete SMB para comprobar la vulnerabilidad
					# Este ejemplo utiliza un identificador único del protocolo para detectar MS17-010
					# secuencia ASCII de la palabra "SMB" (en el contexto de un paquete SMB).
					smb_packet = "\x00\x00\x00\x90" + "\xFF\x53\x4D\x42" + ("\x00" * 100)
					sock.put(smb_packet)
					response = sock.get_once

					# \x05\x02\x00\xC0 - secuencia esperada para indicar que el sistema es vulnerable a MS17-010:
					if response && response.include?("\x05\x02\x00\xC0")
						print_good("#{ip} es vulnerable a MS17-010.")
					else
						print_status("#{ip} no es vulnerable a MS17-010.")
					end
				rescue Rex::ConnectionError
					print_error("No se pudo conectar al puerto SMB en #{ip}.")
				ensure
					disconnect(sock) if sock
				end
			end
		end
	end
end
